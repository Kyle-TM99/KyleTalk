<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kyletalk.sns.mapper.FriendMapper">
    
    <!-- 친구 목록 조회 -->
    <select id="getFriendList" resultType="Friend">
        SELECT 
            m.member_id as memberId,
            m.nickname,
            m.member_image as memberImage,
            m.status_message as statusMessage,
            m.is_online as online,
            f.friends_since as friendsSince
        FROM friendship f
        JOIN member m ON (
            CASE 
                WHEN f.member_id1 = #{memberId} THEN f.member_id2 = m.member_id
                ELSE f.member_id1 = m.member_id
            END
        )
        WHERE f.member_id1 = #{memberId} OR f.member_id2 = #{memberId}
        ORDER BY m.nickname
    </select>
    
    <!-- 온라인 친구 조회 -->
    <select id="getOnlineFriends" resultType="Friend">
        SELECT 
            m.member_id as memberId,
            m.nickname,
            m.member_image as memberImage,
            m.status_message as statusMessage,
            m.is_online as online,
            f.friends_since as friendsSince
        FROM friendship f
        JOIN member m ON (
            CASE 
                WHEN f.member_id1 = #{memberId} THEN f.member_id2 = m.member_id
                ELSE f.member_id1 = m.member_id
            END
        )
        WHERE (f.member_id1 = #{memberId} OR f.member_id2 = #{memberId})
        AND m.is_online = true
        ORDER BY m.nickname
    </select>
    
    <!-- 친구 요청 목록 조회 -->
    <select id="getFriendRequests" resultType="FriendRequest">
        SELECT 
            fr.request_id as requestId,
            fr.from_member_id as fromMemberId,
            fr.to_member_id as toMemberId,
            m.nickname,
            m.member_image as memberImage,
            fr.request_date as requestDate
        FROM friend_request fr
        JOIN member m ON fr.from_member_id = m.member_id
        WHERE fr.to_member_id = #{memberId}
        ORDER BY fr.request_date DESC
    </select>
    
    <!-- 친구 요청 조회 -->
    <select id="getFriendRequest" resultType="FriendRequest">
        SELECT * FROM friend_request WHERE request_id = #{requestId}
    </select>
    
    <!-- 친구 관계 확인 -->
    <select id="isFriend" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM friendship 
            WHERE (member_id1 = #{memberId1} AND member_id2 = #{memberId2})
            OR (member_id1 = #{memberId2} AND member_id2 = #{memberId1})
        )
    </select>
    
    <!-- 친구 요청 존재 확인 -->
    <select id="hasRequestPending" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 FROM friend_request 
            WHERE from_member_id = #{fromMemberId} 
            AND to_member_id = #{toMemberId}
        )
    </select>
    
    <!-- 친구 요청 생성 -->
    <insert id="createFriendRequest">
        INSERT INTO friend_request (from_member_id, to_member_id, request_date)
        VALUES (#{fromMemberId}, #{toMemberId}, NOW())
    </insert>
    
    <!-- 친구 관계 생성 -->
    <insert id="createFriendship">
        INSERT INTO friendship (member_id1, member_id2, friends_since)
        VALUES (#{memberId1}, #{memberId2}, NOW())
    </insert>
    
    <!-- 친구 요청 삭제 -->
    <delete id="deleteFriendRequest">
        DELETE FROM friend_request WHERE request_id = #{requestId}
    </delete>
    
    <!-- 친구 관계 삭제 -->
    <delete id="deleteFriendship">
        DELETE FROM friendship 
        WHERE (member_id1 = #{memberId1} AND member_id2 = #{memberId2})
        OR (member_id1 = #{memberId2} AND member_id2 = #{memberId1})
    </delete>
    
    <!-- 친구 검색 -->
    <select id="searchFriends" resultType="Friend">
        SELECT 
            m.member_id as memberId,
            m.nickname,
            m.member_image as memberImage,
            m.status_message as statusMessage,
            m.is_online as online,
            f.friends_since as friendsSince
        FROM friendship f
        JOIN member m ON (
            CASE 
                WHEN f.member_id1 = #{memberId} THEN f.member_id2 = m.member_id
                ELSE f.member_id1 = m.member_id
            END
        )
        WHERE (f.member_id1 = #{memberId} OR f.member_id2 = #{memberId})
        AND m.nickname LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY m.nickname
    </select>
    
    <!-- 전체 사용자 검색 -->
    <select id="searchAllUsers" resultType="Member">
        SELECT 
            m.member_id as memberId,
            m.nickname,
            m.member_image as memberImage,
            m.status_message as statusMessage,
            m.is_online as online,
            CASE 
                WHEN f.member_id1 IS NOT NULL OR f.member_id2 IS NOT NULL THEN true
                ELSE false
            END as isFriend,
            CASE 
                WHEN fr.from_member_id IS NOT NULL THEN true
                ELSE false
            END as isRequested
        FROM member m
        LEFT JOIN friendship f ON (f.member_id1 = m.member_id AND f.member_id2 = #{currentUserId})
            OR (f.member_id2 = m.member_id AND f.member_id1 = #{currentUserId})
        LEFT JOIN friend_request fr ON fr.from_member_id = #{currentUserId} AND fr.to_member_id = m.member_id
        WHERE m.member_id != #{currentUserId}
        AND m.nickname LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY m.nickname
    </select>
    
</mapper> 